AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: An existing EC2 KeyPair to enable SSH access to the instance
  EC2ImageId:
    Type: AWS::EC2::Image::Id
    Default: ami-09d95fab7fff3776c # us-east-1
    # Default: ami-0477a95397a9154b3 # sa-east-1
    Description: Amazon Linux 2 AMI
  EC2InstanceType:
    Type: String
    Default: t2.micro
    Description: EC2 instance type
  DomainName:
    Type: String
    Default: "mydomain.local"
    Description: Domain Name registered in Route53
  CidrIp:
    Type: String
    Default: "192.168.0.0/24"
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})

Resources:
 ## EC2 Instance
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref EC2ImageId
      InstanceType: !Ref EC2InstanceType
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: !Ref KeyName
      NetworkInterfaces: 
      - AssociatePublicIpAddress: false
        DeviceIndex: "0"
        GroupSet:
          - !Ref EC2InstanceSecurityGroup
        SubnetId:  !ImportValue AppSubnet1
      Monitoring: false
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          # Install Docker
          yum update -y
          amazon-linux-extras install docker
          usermod -a -G docker ec2-user
          systemctl start docker
          systemctl enable docker

          # Install awslogsd
          yum install -y awslogs
          mv /etc/awslogs/awslogs.conf /etc/awslogs/awslogs.conf.bak
          touch /etc/awslogs/awslogs.conf
          cat <<EOT > /etc/awslogs/awslogs.conf
          [general]
          state_file = /var/lib/awslogs/agent-state

          [/var/log/dmesg]
          file = /var/log/dmesg
          log_group_name = ${AWS::StackName}-ECS-OS-dmesg
          log_stream_name = {instance_id}

          [/var/log/messages]
          file = /var/log/messages
          log_group_name = ${AWS::StackName}-ECS-OS-messages
          log_stream_name = {instance_id}
          datetime_format = %b %d %H:%M:%S

          sed -i -e "s/us-east-1/${AWS::Region}/g" /etc/awslogs/awscli.conf

          systemctl start awslogsd
          systemctl enable awslogsd

          # Set timezone
          echo 'ZONE="America/Sao_Paulo"' > /etc/sysconfig/clock
          echo 'UTC=true' >> /etc/sysconfig/clock
          ln -sf /usr/share/zoneinfo/America/Sao_Paulo /etc/localtime

          /bin/easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}"

 ## Security Groups
  EC2InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${AWS::StackName}-Security-Group"
      GroupDescription: Security Group
      VpcId: !ImportValue DefaultVPCId
      SecurityGroupEgress:
        - IpProtocol: "-1"
          CidrIp: "0.0.0.0/0"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref CidrIp
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: "0.0.0.0/0"
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: "0.0.0.0/0"

 ## Route 53
  Route53RecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Sub "${DomainName}."
      Comment: DNS name for the instance
      Name: !Join ['', [!Sub "${AWS::StackName}", ., !Ref DomainName, .]]
      Type: CNAME
      TTL: 900
      ResourceRecords:
      - !GetAtt EC2Instance.PrivateDnsName

 ## IAM Roles
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref EC2Role
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      Policies:
      - PolicyName: cloudwatch-policy
        PolicyDocument:
          >
            {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Action": [
                            "cloudwatch:PutMetricData",
                            "ec2:DescribeTags",
                            "logs:PutLogEvents",
                            "logs:DescribeLogStreams",
                            "logs:DescribeLogGroups",
                            "logs:CreateLogStream",
                            "logs:CreateLogGroup"
                        ],
                        "Resource": "*"
                    },
                    {
                        "Effect": "Allow",
                        "Action": [
                            "ssm:GetParameter",
                            "ssm:PutParameter"
                        ],
                        "Resource": "arn:aws:ssm:*:*:parameter/AmazonCloudWatch-*"
                    }
                ]
            }
      - PolicyName: ecr-policy
        PolicyDocument:
          Version: 2012-10-17
          Statement:
            -
              Effect: Allow
              Action:
                - "ecr:*"
              Resource: "*"

# -- End of CFn script -- #